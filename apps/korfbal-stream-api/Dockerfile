# Builder stage
FROM node:22-alpine AS builder
WORKDIR /workspace

# Install only the dependencies needed for building
COPY package*.json nx.json ./
# Use npm ci only when a lockfile is present to avoid noisy errors in CI/build logs
RUN npm config set fetch-timeout 60000 && \
    npm config set fetch-retries 3 && \
    sh -c "if [ -f package-lock.json ]; then npm ci --verbose; else npm i --verbose; fi"
# Copy TypeScript configurations and source files
COPY tsconfig.base.json tsconfig.json ./
COPY apps/korfbal-stream-api/tsconfig*.json apps/korfbal-stream-api/
COPY apps/korfbal-stream-api/.swcrc apps/korfbal-stream-api/
COPY apps/korfbal-stream-api/prisma apps/korfbal-stream-api/prisma
COPY apps/korfbal-stream-api/src apps/korfbal-stream-api/src

# Generate Prisma client (needed during build)
RUN npx prisma generate --schema=apps/korfbal-stream-api/prisma/schema.prisma


# Build the API with Nx (SWC)
RUN npx nx build @korfbal-stream-kit/korfbal-stream-api

# Runtime stage
FROM node:22-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production

# Copy compiled application and Prisma schema
COPY --from=builder /workspace/dist/apps/korfbal-stream-api ./
COPY --from=builder /workspace/apps/korfbal-stream-api/prisma ./prisma

# Use the pruned package.json generated by Nx to install only runtime deps
# This requires generatePackageJson: true in the build options
COPY --from=builder /workspace/dist/apps/korfbal-stream-api/package.json ./package.json

# Ensure Prisma uses the correct schema during @prisma/client postinstall
ENV PRISMA_SCHEMA_PATH=apps/korfbal-stream-api/prisma/schema.prisma

# Install production dependencies only (no lockfile here; pruned deps are minimal)
RUN npm i --omit=dev --no-audit --no-fund && \
    npx prisma generate --schema=./prisma/schema.prisma

EXPOSE 3333
ENV PORT=3333
CMD ["node", "main.js"]
